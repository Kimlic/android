package com.kimlic.quorum;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.4.0.
 */
public class AccountStorageAdapter extends Contract {
    private static final String BINARY = "0x608060405234801561001057600080fd5b50604051602080613639833981016040525160008054600160a060020a0319908116331790915560018054600160a060020a03909316929091169190911790556135da8061005f6000396000f3006080604052600436106100cc5763ffffffff60e060020a6000350416630c86361f81146100d15780632b5dead1146101af578063702aaefd1461021c57806370bbf518146102a1578063715018a6146102fc57806378b9d4b2146103115780638da5cb5b1461036a57806394c902971461037f578063bbe78c1b146103f1578063bc64218a1461046a578063ce179b9b146104d1578063ceeef13314610538578063d22b9929146105dc578063f1b2c83914610654578063f2fde38b146106bb578063f5464ddf146106dc575b600080fd5b3480156100dd57600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261013a958335600160a060020a031695369560449491939091019190819084018382808284375094975050933594506107739350505050565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561017457818101518382015260200161015c565b50505050905090810190601f1680156101a15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101bb57600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610208943694929360249392840191908190840183828082843750949750610e549650505050505050565b604080519115158252519081900360200190f35b34801561022857600080fd5b5060408051602060046024803582810135601f8101859004850286018501909652858552610285958335600160a060020a03169536956044949193909101919081908401838280828437509497505093359450610ebf9350505050565b60408051600160a060020a039092168252519081900360200190f35b3480156102ad57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102fa9436949293602493928401919081908401838280828437509497506115fc9650505050505050565b005b34801561030857600080fd5b506102fa61167d565b34801561031d57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102fa9436949293602493928401919081908401838280828437509497506116e99650505050505050565b34801561037657600080fd5b50610285611774565b34801561038b57600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526102fa958335600160a060020a031695369560449491939091019190819084018382808284375094975050509235600160a060020a0316935061178392505050565b3480156103fd57600080fd5b5060408051602060046024803582810135601f8101859004850286018501909652858552610458958335600160a060020a03169536956044949193909101919081908401838280828437509497506117a39650505050505050565b60408051918252519081900360200190f35b34801561047657600080fd5b5060408051602060046024803582810135601f8101859004850286018501909652858552610285958335600160a060020a0316953695604494919390910191908190840183828082843750949750611ae39650505050505050565b3480156104dd57600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261013a958335600160a060020a0316953695604494919390910191908190840183828082843750949750611b059650505050505050565b34801561054457600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526105a1958335600160a060020a03169536956044949193909101919081908401838280828437509497505093359450611b209350505050565b604051808460038111156105b157fe5b60ff168152600160a060020a0390931660208401525060408083019190915251908190036060019150f35b3480156105e857600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526102fa958335600160a060020a03169536956044949193909101919081908401838280828437509497505084359550505050602090910135600160a060020a03169050612391565b34801561066057600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526105a1958335600160a060020a0316953695604494919390910191908190840183828082843750949750612ad79650505050505050565b3480156106c757600080fd5b506102fa600160a060020a0360043516612b02565b3480156106e857600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102fa94369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750949750612b969650505050505050565b606060006060856000610784612ba5565b905080600160a060020a03166322d2dd346040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156107c457600080fd5b505af11580156107d8573d6000803e3d6000fd5b505050506040513d60208110156107ee57600080fd5b50516040805160e060020a633b562a6d0281523360048201529051600160a060020a0390921691633b562a6d916024808201926020929091908290030181600087803b15801561083d57600080fd5b505af1158015610851573d6000803e3d6000fd5b505050506040513d602081101561086757600080fd5b505180610953575080600160a060020a031663b819723a6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156108ad57600080fd5b505af11580156108c1573d6000803e3d6000fd5b505050506040513d60208110156108d757600080fd5b50516040805160e060020a633b562a6d0281523360048201529051600160a060020a0390921691633b562a6d916024808201926020929091908290030181600087803b15801561092657600080fd5b505af115801561093a573d6000803e3d6000fd5b505050506040513d602081101561095057600080fd5b50515b806109cf575080600160a060020a03166322d2dd346040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561099757600080fd5b505af11580156109ab573d6000803e3d6000fd5b505050506040513d60208110156109c157600080fd5b5051600160a060020a031633145b80610a4b575080600160a060020a031663beb837126040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610a1357600080fd5b505af1158015610a27573d6000803e3d6000fd5b505050506040513d6020811015610a3d57600080fd5b5051600160a060020a031633145b80610a605750600054600160a060020a031633145b80610adc575080600160a060020a0316638da5cb5b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610aa457600080fd5b505af1158015610ab8573d6000803e3d6000fd5b505050506040513d6020811015610ace57600080fd5b5051600160a060020a031633145b80610aef575033600160a060020a038316145b1515610b6b576040805160e560020a62461bcd02815260206004820152603660248201527f41636365737320746f2074686973206d6574686f64206e6f7420616c6c6f776560448201527f642066726f6d2063757272656e74206163636f756e7400000000000000000000606482015290519081900360840190fd5b610b73612ba5565b600160a060020a031663293b0c4e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610bb057600080fd5b505af1158015610bc4573d6000803e3d6000fd5b505050506040513d6020811015610bda57600080fd5b5051604080518082018252600881527f6d657461446174610000000000000000000000000000000000000000000000006020828101919091528251600160a060020a038d16818301908152606082018c905260809482018581528d5160a08401528d51969a508e968e968e9695939492939083019260c001919088019080838360005b83811015610c75578181015183820152602001610c5d565b50505050905090810190601f168015610ca25780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015610cd5578181015183820152602001610cbd565b50505050905090810190601f168015610d025780820380516001836020036101000a031916815260200191505b509650505050505050604051602081830303815290604052925083600160a060020a031663986e791a846040518082805190602001908083835b60208310610d5b5780518252601f199092019160209182019101610d3c565b5181516020939093036101000a60001901801990911692169190911790526040805191909301819003812063ffffffff871660e060020a0282526004820152915160248084019550600094509092839003019050818387803b158015610dc057600080fd5b505af1158015610dd4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610dfd57600080fd5b810190808051640100000000811115610e1557600080fd5b82016020810184811115610e2857600080fd5b8151640100000000811182820187101715610e4257600080fd5b50909c9b505050505050505050505050565b60006002826040518082805190602001908083835b60208310610e885780518252601f199092019160209182019101610e69565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205460ff16949350505050565b60006060836002816040518082805190602001908083835b60208310610ef65780518252601f199092019160209182019101610ed7565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205460ff1615159150610f7b9050576040805160e560020a62461bcd028152602060048201526022602482015260008051602061358f833981519152604482015260f260020a61195902606482015290519081900360840190fd5b856000610f86612ba5565b905080600160a060020a03166322d2dd346040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610fc657600080fd5b505af1158015610fda573d6000803e3d6000fd5b505050506040513d6020811015610ff057600080fd5b50516040805160e060020a633b562a6d0281523360048201529051600160a060020a0390921691633b562a6d916024808201926020929091908290030181600087803b15801561103f57600080fd5b505af1158015611053573d6000803e3d6000fd5b505050506040513d602081101561106957600080fd5b505180611155575080600160a060020a031663b819723a6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156110af57600080fd5b505af11580156110c3573d6000803e3d6000fd5b505050506040513d60208110156110d957600080fd5b50516040805160e060020a633b562a6d0281523360048201529051600160a060020a0390921691633b562a6d916024808201926020929091908290030181600087803b15801561112857600080fd5b505af115801561113c573d6000803e3d6000fd5b505050506040513d602081101561115257600080fd5b50515b806111d1575080600160a060020a03166322d2dd346040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561119957600080fd5b505af11580156111ad573d6000803e3d6000fd5b505050506040513d60208110156111c357600080fd5b5051600160a060020a031633145b8061124d575080600160a060020a031663beb837126040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561121557600080fd5b505af1158015611229573d6000803e3d6000fd5b505050506040513d602081101561123f57600080fd5b5051600160a060020a031633145b806112625750600054600160a060020a031633145b806112de575080600160a060020a0316638da5cb5b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156112a657600080fd5b505af11580156112ba573d6000803e3d6000fd5b505050506040513d60208110156112d057600080fd5b5051600160a060020a031633145b806112f1575033600160a060020a038316145b151561136d576040805160e560020a62461bcd02815260206004820152603660248201527f41636365737320746f2074686973206d6574686f64206e6f7420616c6c6f776560448201527f642066726f6d2063757272656e74206163636f756e7400000000000000000000606482015290519081900360840190fd5b8787876040805190810160405280601881526020017f6d657461566572696669636174696f6e436f6e747261637400000000000000008152506040516020018085600160a060020a0316600160a060020a031681526020018060200184815260200180602001838103835286818151815260200191508051906020019080838360005b838110156114085781810151838201526020016113f0565b50505050905090810190601f1680156114355780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015611468578181015183820152602001611450565b50505050905090810190601f1680156114955780820380516001836020036101000a031916815260200191505b50965050505050505060405160208183030381529060405293506114b7612ba5565b600160a060020a031663293b0c4e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156114f457600080fd5b505af1158015611508573d6000803e3d6000fd5b505050506040513d602081101561151e57600080fd5b50516040518551600160a060020a03909216916321f8a721918791819060208401908083835b602083106115635780518252601f199092019160209182019101611544565b51815160209384036101000a60001901801990921691161790526040805192909401829003822063ffffffff881660e060020a0283526004830152925160248083019650939450929083900301905081600087803b1580156115c457600080fd5b505af11580156115d8573d6000803e3d6000fd5b505050506040513d60208110156115ee57600080fd5b505198975050505050505050565b600054600160a060020a0316331461161357600080fd5b6002816040518082805190602001908083835b602083106116455780518252601f199092019160209182019101611626565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220805460ff19169055505050565b600054600160a060020a0316331461169457600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a0316331461170057600080fd5b60016002826040518082805190602001908083835b602083106117345780518252601f199092019160209182019101611715565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220805460ff191693151593909317909255505050565b600054600160a060020a031681565b600061178f84846117a3565b905061179d84848385612391565b50505050565b60006060826002816040518082805190602001908083835b602083106117da5780518252601f1990920191602091820191016117bb565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205460ff161515915061185f9050576040805160e560020a62461bcd028152602060048201526022602482015260008051602061358f833981519152604482015260f260020a61195902606482015290519081900360840190fd5b84846040805190810160405280600681526020017f6c656e67746800000000000000000000000000000000000000000000000000008152506040516020018084600160a060020a0316600160a060020a031681526020018060200180602001838103835285818151815260200191508051906020019080838360005b838110156118f35781810151838201526020016118db565b50505050905090810190601f1680156119205780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b8381101561195357818101518382015260200161193b565b50505050905090810190601f1680156119805780820380516001836020036101000a031916815260200191505b509550505050505060405160208183030381529060405291506119a1612ba5565b600160a060020a031663293b0c4e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156119de57600080fd5b505af11580156119f2573d6000803e3d6000fd5b505050506040513d6020811015611a0857600080fd5b50516040518351600160a060020a039092169163bd02d0f5918591819060208401908083835b60208310611a4d5780518252601f199092019160209182019101611a2e565b51815160209384036101000a60001901801990921691161790526040805192909401829003822063ffffffff881660e060020a0283526004830152925160248083019650939450929083900301905081600087803b158015611aae57600080fd5b505af1158015611ac2573d6000803e3d6000fd5b505050506040513d6020811015611ad857600080fd5b505195945050505050565b600080611af084846117a3565b9050611afd848483610ebf565b949350505050565b60606000611b1384846117a3565b9050611afd848483610773565b60008060008060606000876002816040518082805190602001908083835b60208310611b5d5780518252601f199092019160209182019101611b3e565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205460ff1615159150611be29050576040805160e560020a62461bcd028152602060048201526022602482015260008051602061358f833981519152604482015260f260020a61195902606482015290519081900360840190fd5b896000611bed612ba5565b905080600160a060020a03166322d2dd346040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611c2d57600080fd5b505af1158015611c41573d6000803e3d6000fd5b505050506040513d6020811015611c5757600080fd5b50516040805160e060020a633b562a6d0281523360048201529051600160a060020a0390921691633b562a6d916024808201926020929091908290030181600087803b158015611ca657600080fd5b505af1158015611cba573d6000803e3d6000fd5b505050506040513d6020811015611cd057600080fd5b505180611dbc575080600160a060020a031663b819723a6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611d1657600080fd5b505af1158015611d2a573d6000803e3d6000fd5b505050506040513d6020811015611d4057600080fd5b50516040805160e060020a633b562a6d0281523360048201529051600160a060020a0390921691633b562a6d916024808201926020929091908290030181600087803b158015611d8f57600080fd5b505af1158015611da3573d6000803e3d6000fd5b505050506040513d6020811015611db957600080fd5b50515b80611e38575080600160a060020a03166322d2dd346040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611e0057600080fd5b505af1158015611e14573d6000803e3d6000fd5b505050506040513d6020811015611e2a57600080fd5b5051600160a060020a031633145b80611eb4575080600160a060020a031663beb837126040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611e7c57600080fd5b505af1158015611e90573d6000803e3d6000fd5b505050506040513d6020811015611ea657600080fd5b5051600160a060020a031633145b80611ec95750600054600160a060020a031633145b80611f45575080600160a060020a0316638da5cb5b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611f0d57600080fd5b505af1158015611f21573d6000803e3d6000fd5b505050506040513d6020811015611f3757600080fd5b5051600160a060020a031633145b80611f58575033600160a060020a038316145b1515611fd4576040805160e560020a62461bcd02815260206004820152603660248201527f41636365737320746f2074686973206d6574686f64206e6f7420616c6c6f776560448201527f642066726f6d2063757272656e74206163636f756e7400000000000000000000606482015290519081900360840190fd5b611fdc612ba5565b600160a060020a031663293b0c4e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561201957600080fd5b505af115801561202d573d6000803e3d6000fd5b505050506040513d602081101561204357600080fd5b810190808051906020019092919050505095508b8b8b6040805190810160405280601881526020017f6d657461566572696669636174696f6e436f6e747261637400000000000000008152506040516020018085600160a060020a0316600160a060020a031681526020018060200184815260200180602001838103835286818151815260200191508051906020019080838360005b838110156120f15781810151838201526020016120d9565b50505050905090810190601f16801561211e5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015612151578181015183820152602001612139565b50505050905090810190601f16801561217e5780820380516001836020036101000a031916815260200191505b509650505050505050604051602081830303815290604052945085600160a060020a03166321f8a721866040518082805190602001908083835b602083106121d75780518252601f1990920191602091820191016121b8565b51815160209384036101000a60001901801990921691161790526040805192909401829003822063ffffffff881660e060020a0283526004830152925160248083019650939450929083900301905081600087803b15801561223857600080fd5b505af115801561224c573d6000803e3d6000fd5b505050506040513d602081101561226257600080fd5b5051604080517f200d2ed20000000000000000000000000000000000000000000000000000000081529051919950899550600160a060020a0386169163200d2ed2916004808201926020929091908290030181600087803b1580156122c657600080fd5b505af11580156122da573d6000803e3d6000fd5b505050506040513d60208110156122f057600080fd5b5051604080517f7d56add70000000000000000000000000000000000000000000000000000000081529051919a50600160a060020a03861691637d56add7916004808201926020929091908290030181600087803b15801561235157600080fd5b505af1158015612365573d6000803e3d6000fd5b505050506040513d602081101561237b57600080fd5b5051989c979b5097995095975050505050505050565b6000806060856002816040518082805190602001908083835b602083106123c95780518252601f1990920191602091820191016123aa565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205460ff161515915061244e9050576040805160e560020a62461bcd028152602060048201526022602482015260008051602061358f833981519152604482015260f260020a61195902606482015290519081900360840190fd5b6000612458612ba5565b905080600160a060020a03166322d2dd346040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561249857600080fd5b505af11580156124ac573d6000803e3d6000fd5b505050506040513d60208110156124c257600080fd5b50516040805160e060020a633b562a6d0281523360048201529051600160a060020a0390921691633b562a6d916024808201926020929091908290030181600087803b15801561251157600080fd5b505af1158015612525573d6000803e3d6000fd5b505050506040513d602081101561253b57600080fd5b5051806125b9575080600160a060020a03166322d2dd346040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561258157600080fd5b505af1158015612595573d6000803e3d6000fd5b505050506040513d60208110156125ab57600080fd5b5051600160a060020a031633145b80612635575080600160a060020a0316638da5cb5b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156125fd57600080fd5b505af1158015612611573d6000803e3d6000fd5b505050506040513d602081101561262757600080fd5b5051600160a060020a031633145b15156126fd576040805160e560020a62461bcd02815260206004820152607c60248201527f41636365737320746f2074686973206d6574686f6420616c6c6f77656420666f60448201527f7220766572696669636174696f6e20636f6e74726163742c207665726966696360648201527f6174696f6e20636f6e747261637420666163746f7279206f72206163636f756e60848201527f742073746f726167652061646170746572206f776e6572206f6e6c790000000060a482015290519081900360c40190fd5b612705612ba5565b945084600160a060020a031663293b0c4e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561274557600080fd5b505af1158015612759573d6000803e3d6000fd5b505050506040513d602081101561276f57600080fd5b5051604080518082018252601881527f6d657461566572696669636174696f6e436f6e747261637400000000000000006020828101919091528251600160a060020a038e16818301908152606082018d905260809482018581528e5160a08401528e51969a508f968f968f9695939492939083019260c001919088019080838360005b8381101561280a5781810151838201526020016127f2565b50505050905090810190601f1680156128375780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b8381101561286a578181015183820152602001612852565b50505050905090810190601f1680156128975780820380516001836020036101000a031916815260200191505b509650505050505050604051602081830303815290604052925083600160a060020a031663ca446dd9846040518082805190602001908083835b602083106128f05780518252601f1990920191602091820191016128d1565b5181516020939093036101000a60001901801990911692169190911790526040805191909301819003812063ffffffff871660e060020a0282526004820152600160a060020a038d166024820152915160448084019550600094509092839003019050818387803b15801561296457600080fd5b505af1158015612978573d6000803e3d6000fd5b5050505084600160a060020a031663beb837126040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156129ba57600080fd5b505af11580156129ce573d6000803e3d6000fd5b505050506040513d60208110156129e457600080fd5b5051604080517f81f5cd68000000000000000000000000000000000000000000000000000000008152600160a060020a038c811660048301908152602483019384528c5160448401528c5191909416936381f5cd68938e938e93606490910190602085019080838360005b83811015612a67578181015183820152602001612a4f565b50505050905090810190601f168015612a945780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015612ab457600080fd5b505af1158015612ac8573d6000803e3d6000fd5b50505050505050505050505050565b600080600080612ae786866117a3565b9050612af4868683611b20565b935093509350509250925092565b600054600160a060020a03163314612b1957600080fd5b600160a060020a0381161515612b2e57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b612ba1338383612c35565b5050565b600154604080517f127f0f070000000000000000000000000000000000000000000000000000000081529051600092600160a060020a03169163127f0f0791600480830192602092919082900301818787803b158015612c0457600080fd5b505af1158015612c18573d6000803e3d6000fd5b505050506040513d6020811015612c2e57600080fd5b5051919050565b6000606060006060612c57866020604051908101604052806000815250612fde565b15612c6157600080fd5b612c6b87866117a3565b9350612cac856040805190810160405280600681526020017f6465766963650000000000000000000000000000000000000000000000000000815250612fde565b15612cbc578315612cbc57600080fd5b6040805160208101909152600081529250612cd5612ba5565b600160a060020a031663293b0c4e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015612d1257600080fd5b505af1158015612d26573d6000803e3d6000fd5b505050506040513d6020811015612d3c57600080fd5b505191506000841115612fba578685856040805190810160405280600881526020017f6d657461446174610000000000000000000000000000000000000000000000008152506040516020018085600160a060020a0316600160a060020a031681526020018060200184815260200180602001838103835286818151815260200191508051906020019080838360005b83811015612de4578181015183820152602001612dcc565b50505050905090810190601f168015612e115780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015612e44578181015183820152602001612e2c565b50505050905090810190601f168015612e715780820380516001836020036101000a031916815260200191505b509650505050505050604051602081830303815290604052905081600160a060020a031663986e791a826040518082805190602001908083835b60208310612eca5780518252601f199092019160209182019101612eab565b5181516020939093036101000a60001901801990911692169190911790526040805191909301819003812063ffffffff871660e060020a0282526004820152915160248084019550600094509092839003019050818387803b158015612f2f57600080fd5b505af1158015612f43573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015612f6c57600080fd5b810190808051640100000000811115612f8457600080fd5b82016020810184811115612f9757600080fd5b8151640100000000811182820187101715612fb157600080fd5b50909650505050505b612fc48387612fde565b1515612fd557612fd58787876130a0565b50505050505050565b6000816040518082805190602001908083835b602083106130105780518252601f199092019160209182019101612ff1565b51815160209384036101000a6000190180199092169116179052604051919093018190038120885190955088945090928392508401908083835b602083106130695780518252601f19909201916020918201910161304a565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120939093149695505050505050565b6000806060806130b087866117a3565b60010193506130bd612ba5565b600160a060020a031663293b0c4e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156130fa57600080fd5b505af115801561310e573d6000803e3d6000fd5b505050506040513d602081101561312457600080fd5b5051604080518082018252600881527f6d657461446174610000000000000000000000000000000000000000000000006020828101919091528251600160a060020a038c16818301908152606082018a905260809482018581528b5160a08401528b519699508d968c968c9695939492939083019260c001919088019080838360005b838110156131bf5781810151838201526020016131a7565b50505050905090810190601f1680156131ec5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b8381101561321f578181015183820152602001613207565b50505050905090810190601f16801561324c5780820380516001836020036101000a031916815260200191505b509650505050505050604051602081830303815290604052915082600160a060020a0316636e899550836040518082805190602001908083835b602083106132a55780518252601f199092019160209182019101613286565b51815160209384036101000a60001901801990921691161790526040805192909401829003822063ffffffff881660e060020a02835260048301818152602484019586528f5160448501528f519197508f96509493506064909201919085019080838360005b8381101561332357818101518382015260200161330b565b50505050905090810190601f1680156133505780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561337057600080fd5b505af1158015613384573d6000803e3d6000fd5b5050505086856040805190810160405280600681526020017f6c656e67746800000000000000000000000000000000000000000000000000008152506040516020018084600160a060020a0316600160a060020a031681526020018060200180602001838103835285818151815260200191508051906020019080838360005b8381101561341c578181015183820152602001613404565b50505050905090810190601f1680156134495780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b8381101561347c578181015183820152602001613464565b50505050905090810190601f1680156134a95780820380516001836020036101000a031916815260200191505b5095505050505050604051602081830303815290604052905082600160a060020a031663e2a4853a826040518082805190602001908083835b602083106135015780518252601f1990920191602091820191016134e2565b5181516020939093036101000a60001901801990911692169190911790526040805191909301819003812063ffffffff871660e060020a0282526004820152602481018b9052915160448084019550600094509092839003019050818387803b15801561356d57600080fd5b505af1158015613581573d6000803e3d6000fd5b5050505050505050505050560050726f7669646564206669656c64206e616d65206973206e6f7420616c6c6f77a165627a7a72305820c6608e3fe17bc8effc9993a3672e54156acf580d71c2722c0862106ac0fd3cc80029";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_ADDALLOWEDFIELDNAME = "addAllowedFieldName";

    public static final String FUNC_REMOVEALLOWEDFIELDNAME = "removeAllowedFieldName";

    public static final String FUNC_ISALLOWEDFIELDNAME = "isAllowedFieldName";

    public static final String FUNC_SETACCOUNTFIELDMAINDATA = "setAccountFieldMainData";

    public static final String FUNC_GETLASTACCOUNTDATAVERIFICATIONCONTRACTADDRESS = "getLastAccountDataVerificationContractAddress";

    public static final String FUNC_GETACCOUNTDATAVERIFICATIONCONTRACTADDRESS = "getAccountDataVerificationContractAddress";

    public static final String FUNC_GETACCOUNTFIELDLASTMAINDATA = "getAccountFieldLastMainData";

    public static final String FUNC_GETACCOUNTFIELDMAINDATA = "getAccountFieldMainData";

    public static final String FUNC_GETACCOUNTFIELDLASTVERIFICATIONDATA = "getAccountFieldLastVerificationData";

    public static final String FUNC_GETACCOUNTFIELDVERIFICATIONDATA = "getAccountFieldVerificationData";

    public static final String FUNC_SETACCOUNTFIELDVERIFICATIONCONTRACTADDRESS = "setAccountFieldVerificationContractAddress";

    public static final String FUNC_GETFIELDHISTORYLENGTH = "getFieldHistoryLength";

    public static final Event OWNERSHIPRENOUNCED_EVENT = new Event("OwnershipRenounced", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
            Arrays.<TypeReference<?>>asList());
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
            Arrays.<TypeReference<?>>asList());
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("10", "0x267aa04f44bdbd1a15ac9269d48d1d471307ba8c");
    }

    protected AccountStorageAdapter(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected AccountStorageAdapter(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public RemoteCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static RemoteCall<AccountStorageAdapter> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String contextstorage) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(contextstorage)));
        return deployRemoteCall(AccountStorageAdapter.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<AccountStorageAdapter> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String contextstorage) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(contextstorage)));
        return deployRemoteCall(AccountStorageAdapter.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public List<OwnershipRenouncedEventResponse> getOwnershipRenouncedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPRENOUNCED_EVENT, transactionReceipt);
        ArrayList<OwnershipRenouncedEventResponse> responses = new ArrayList<OwnershipRenouncedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipRenouncedEventResponse typedResponse = new OwnershipRenouncedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipRenouncedEventResponse> ownershipRenouncedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnershipRenouncedEventResponse>() {
            @Override
            public OwnershipRenouncedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPRENOUNCED_EVENT, log);
                OwnershipRenouncedEventResponse typedResponse = new OwnershipRenouncedEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<OwnershipRenouncedEventResponse> ownershipRenouncedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPRENOUNCED_EVENT));
        return ownershipRenouncedEventObservable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipTransferredEventResponse> ownershipTransferredEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<OwnershipTransferredEventResponse> ownershipTransferredEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventObservable(filter);
    }

    public RemoteCall<TransactionReceipt> addAllowedFieldName(String fieldName) {
        final Function function = new Function(
                FUNC_ADDALLOWEDFIELDNAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(fieldName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> removeAllowedFieldName(String fieldName) {
        final Function function = new Function(
                FUNC_REMOVEALLOWEDFIELDNAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(fieldName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> isAllowedFieldName(String fieldName) {
        final Function function = new Function(FUNC_ISALLOWEDFIELDNAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(fieldName)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> setAccountFieldMainData(String data, String accountFieldName) {
        final Function function = new Function(
                FUNC_SETACCOUNTFIELDMAINDATA, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(data), 
                new org.web3j.abi.datatypes.Utf8String(accountFieldName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> getLastAccountDataVerificationContractAddress(String accountAddress, String accountFieldName) {
        final Function function = new Function(FUNC_GETLASTACCOUNTDATAVERIFICATIONCONTRACTADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(accountAddress), 
                new org.web3j.abi.datatypes.Utf8String(accountFieldName)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> getAccountDataVerificationContractAddress(String accountAddress, String accountFieldName, BigInteger index) {
        final Function function = new Function(FUNC_GETACCOUNTDATAVERIFICATIONCONTRACTADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(accountAddress), 
                new org.web3j.abi.datatypes.Utf8String(accountFieldName), 
                new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> getAccountFieldLastMainData(String accountAddress, String accountFieldName) {
        final Function function = new Function(FUNC_GETACCOUNTFIELDLASTMAINDATA, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(accountAddress), 
                new org.web3j.abi.datatypes.Utf8String(accountFieldName)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> getAccountFieldMainData(String accountAddress, String accountFieldName, BigInteger index) {
        final Function function = new Function(FUNC_GETACCOUNTFIELDMAINDATA, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(accountAddress), 
                new org.web3j.abi.datatypes.Utf8String(accountFieldName), 
                new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple3<BigInteger, String, BigInteger>> getAccountFieldLastVerificationData(String accountAddress, String accountFieldName) {
        final Function function = new Function(FUNC_GETACCOUNTFIELDLASTVERIFICATIONDATA, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(accountAddress), 
                new org.web3j.abi.datatypes.Utf8String(accountFieldName)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple3<BigInteger, String, BigInteger>>(
                new Callable<Tuple3<BigInteger, String, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, String, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<Tuple3<BigInteger, String, BigInteger>> getAccountFieldVerificationData(String accountAddress, String accountFieldName, BigInteger index) {
        final Function function = new Function(FUNC_GETACCOUNTFIELDVERIFICATIONDATA, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(accountAddress), 
                new org.web3j.abi.datatypes.Utf8String(accountFieldName), 
                new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple3<BigInteger, String, BigInteger>>(
                new Callable<Tuple3<BigInteger, String, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, String, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> setAccountFieldVerificationContractAddress(String accountAddress, String accountFieldName, String verificationContractAddress) {
        final Function function = new Function(
                FUNC_SETACCOUNTFIELDVERIFICATIONCONTRACTADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(accountAddress), 
                new org.web3j.abi.datatypes.Utf8String(accountFieldName), 
                new org.web3j.abi.datatypes.Address(verificationContractAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setAccountFieldVerificationContractAddress(String accountAddress, String accountFieldName, BigInteger index, String verificationContractAddress) {
        final Function function = new Function(
                FUNC_SETACCOUNTFIELDVERIFICATIONCONTRACTADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(accountAddress), 
                new org.web3j.abi.datatypes.Utf8String(accountFieldName), 
                new org.web3j.abi.datatypes.generated.Uint256(index), 
                new org.web3j.abi.datatypes.Address(verificationContractAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getFieldHistoryLength(String accountAddress, String accountFieldName) {
        final Function function = new Function(FUNC_GETFIELDHISTORYLENGTH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(accountAddress), 
                new org.web3j.abi.datatypes.Utf8String(accountFieldName)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public static AccountStorageAdapter load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new AccountStorageAdapter(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static AccountStorageAdapter load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new AccountStorageAdapter(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class OwnershipRenouncedEventResponse {
        public Log log;

        public String previousOwner;
    }

    public static class OwnershipTransferredEventResponse {
        public Log log;

        public String previousOwner;

        public String newOwner;
    }
}
