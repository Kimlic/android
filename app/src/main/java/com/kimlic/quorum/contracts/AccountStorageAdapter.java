package com.kimlic.quorum.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.5.0.
 */
public class AccountStorageAdapter extends Contract {
    private static final String BINARY = "0x608060405234801561001057600080fd5b50604051602080613d8f833981016040525160008054600160a060020a0319908116331790915560018054600160a060020a0390931692909116919091179055613d308061005f6000396000f3006080604052600436106100f85763ffffffff60e060020a6000350416632b5dead181146100fd5780633babddf61461016a578063466f1b7b1461020e57806370bbf51814610275578063715018a6146102d057806378b9d4b2146102e55780637f6a027b1461033e578063849b177e146103b05780638da5cb5b146104475780639590de3b146104785780639b7e69651461058c578063bbe78c1b14610604578063c05e88aa1461067d578063caf7043b146106a1578063ced001e61461070a578063cfd00c4914610773578063d49dfda214610851578063d5899c01146108b8578063f2fde38b146108dc578063f40650ce146108fd575b600080fd5b34801561010957600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101569436949293602493928401919081908401838280828437509497506109649650505050505050565b604080519115158252519081900360200190f35b34801561017657600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526101d3958335600160a060020a031695369560449491939091019190819084018382808284375094975050933594506109cf9350505050565b604051808460048111156101e357fe5b60ff168152600160a060020a0390931660208401525060408083019190915251908190036060019150f35b34801561021a57600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526101d3958335600160a060020a0316953695604494919390910191908190840183828082843750949750610ae99650505050505050565b34801561028157600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102ce943694929360249392840191908190840183828082843750949750610b149650505050505050565b005b3480156102dc57600080fd5b506102ce610b95565b3480156102f157600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102ce943694929360249392840191908190840183828082843750949750610c019650505050505050565b34801561034a57600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526102ce958335600160a060020a031695369560449491939091019190819084018382808284375094975050509235600160a060020a03169350610c8c92505050565b3480156103bc57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102ce94369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750949750610cac9650505050505050565b34801561045357600080fd5b5061045c610cbb565b60408051600160a060020a039092168252519081900360200190f35b34801561048457600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526104df958335600160a060020a0316953695604494919390910191908190840183828082843750949750610cca9650505050505050565b60405180806020018560048111156104f357fe5b60ff16815260200184600160a060020a0316600160a060020a03168152602001838152602001828103825286818151815260200191508051906020019080838360005b8381101561054e578181015183820152602001610536565b50505050905090810190601f16801561057b5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b34801561059857600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526102ce958335600160a060020a03169536956044949193909101919081908401838280828437509497505084359550505050602090910135600160a060020a0316905061171b565b34801561061057600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261066b958335600160a060020a0316953695604494919390910191908190840183828082843750949750611ca39650505050505050565b60408051918252519081900360200190f35b34801561068957600080fd5b506102ce600160a060020a0360043516602435611f87565b3480156106ad57600080fd5b5060408051602060046024803582810135601f8101859004850286018501909652858552610156958335600160a060020a031695369560449491939091019190819084018382808284375094975050933594506122079350505050565b34801561071657600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261045c958335600160a060020a031695369560449491939091019190819084018382808284375094975050933594506122299350505050565b34801561077f57600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526107dc958335600160a060020a031695369560449491939091019190819084018382808284375094975050933594506128f89350505050565b6040805160208082528351818301528351919283929083019185019080838360005b838110156108165781810151838201526020016107fe565b50505050905090810190601f1680156108435780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561085d57600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526107dc958335600160a060020a03169536956044949193909101919081908401838280828437509497506130209650505050505050565b3480156108c457600080fd5b5061066b600160a060020a0360043516602435613043565b3480156108e857600080fd5b506102ce600160a060020a0360043516613259565b34801561090957600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261045c958335600160a060020a03169536956044949193909101919081908401838280828437509497506132ed9650505050505050565b60006002826040518082805190602001908083835b602083106109985780518252601f199092019160209182019101610979565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205460ff16949350505050565b6000806000806109e0878787612229565b925082905080600160a060020a0316634e69d5606040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610a2357600080fd5b505af1158015610a37573d6000803e3d6000fd5b505050506040513d6020811015610a4d57600080fd5b5051604080517f7d56add70000000000000000000000000000000000000000000000000000000081529051919550600160a060020a03831691637d56add7916004808201926020929091908290030181600087803b158015610aae57600080fd5b505af1158015610ac2573d6000803e3d6000fd5b505050506040513d6020811015610ad857600080fd5b505193979296509294509092505050565b600080600080610af98686611ca3565b9050610b068686836109cf565b935093509350509250925092565b600054600160a060020a03163314610b2b57600080fd5b6002816040518082805190602001908083835b60208310610b5d5780518252601f199092019160209182019101610b3e565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220805460ff19169055505050565b600054600160a060020a03163314610bac57600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a03163314610c1857600080fd5b60016002826040518082805190602001908083835b60208310610c4c5780518252601f199092019160209182019101610c2d565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220805460ff191693151593909317909255505050565b6000610c988484611ca3565b9050610ca68484838561171b565b50505050565b610cb7338383613307565b5050565b600054600160a060020a031681565b60606000806000806000606080600089610ce381610964565b1515610d35576040805160e560020a62461bcd0281526020600482015260226024820152600080516020613ce5833981519152604482015260f260020a61195902606482015290519081900360840190fd5b8b6000610d4061369a565b905080600160a060020a03166322d2dd346040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610d8057600080fd5b505af1158015610d94573d6000803e3d6000fd5b505050506040513d6020811015610daa57600080fd5b50516040805160e060020a633b562a6d0281523360048201529051600160a060020a0390921691633b562a6d916024808201926020929091908290030181600087803b158015610df957600080fd5b505af1158015610e0d573d6000803e3d6000fd5b505050506040513d6020811015610e2357600080fd5b505180610f0f575080600160a060020a031663b819723a6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610e6957600080fd5b505af1158015610e7d573d6000803e3d6000fd5b505050506040513d6020811015610e9357600080fd5b50516040805160e060020a633b562a6d0281523360048201529051600160a060020a0390921691633b562a6d916024808201926020929091908290030181600087803b158015610ee257600080fd5b505af1158015610ef6573d6000803e3d6000fd5b505050506040513d6020811015610f0c57600080fd5b50515b80610f8b575080600160a060020a03166322d2dd346040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610f5357600080fd5b505af1158015610f67573d6000803e3d6000fd5b505050506040513d6020811015610f7d57600080fd5b5051600160a060020a031633145b80611007575080600160a060020a031663beb837126040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610fcf57600080fd5b505af1158015610fe3573d6000803e3d6000fd5b505050506040513d6020811015610ff957600080fd5b5051600160a060020a031633145b8061101c5750600054600160a060020a031633145b80611098575080600160a060020a0316638da5cb5b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561106057600080fd5b505af1158015611074573d6000803e3d6000fd5b505050506040513d602081101561108a57600080fd5b5051600160a060020a031633145b806110ab575033600160a060020a038316145b1515611127576040805160e560020a62461bcd02815260206004820152603660248201527f41636365737320746f2074686973206d6574686f64206e6f7420616c6c6f776560448201527f642066726f6d2063757272656e74206163636f756e7400000000000000000000606482015290519081900360840190fd5b61112f61369a565b600160a060020a031663293b0c4e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561116c57600080fd5b505af1158015611180573d6000803e3d6000fd5b505050506040513d602081101561119657600080fd5b505197506111a48e8e611ca3565b96508d8d8860408051908101604052806004815260200160e060020a6364617461028152506040516020018085600160a060020a0316600160a060020a031681526020018060200184815260200180602001838103835286818151815260200191508051906020019080838360005b8381101561122b578181015183820152602001611213565b50505050905090810190601f1680156112585780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b8381101561128b578181015183820152602001611273565b50505050905090810190601f1680156112b85780820380516001836020036101000a031916815260200191505b509650505050505050604051602081830303815290604052955087600160a060020a031663986e791a876040518082805190602001908083835b602083106113115780518252601f1990920191602091820191016112f2565b5181516020939093036101000a60001901801990911692169190911790526040805191909301819003812063ffffffff871660e060020a0282526004820152915160248084019550600094509092839003019050818387803b15801561137657600080fd5b505af115801561138a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156113b357600080fd5b8101908080516401000000008111156113cb57600080fd5b820160208101848111156113de57600080fd5b81516401000000008111828201871017156113f857600080fd5b50509291905050509b508d8d886040805190810160405280601b8152602001600080516020613cc58339815191528152506040516020018085600160a060020a0316600160a060020a031681526020018060200184815260200180602001838103835286818151815260200191508051906020019080838360005b8381101561148b578181015183820152602001611473565b50505050905090810190601f1680156114b85780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156114eb5781810151838201526020016114d3565b50505050905090810190601f1680156115185780820380516001836020036101000a031916815260200191505b509650505050505050604051602081830303815290604052945087600160a060020a03166321f8a721866040518082805190602001908083835b602083106115715780518252601f199092019160209182019101611552565b51815160209384036101000a60001901801990921691161790526040805192909401829003822063ffffffff881660e060020a0283526004830152925160248083019650939450929083900301905081600087803b1580156115d257600080fd5b505af11580156115e6573d6000803e3d6000fd5b505050506040513d60208110156115fc57600080fd5b50519950600160a060020a038a161561170a5789935083600160a060020a0316634e69d5606040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561165057600080fd5b505af1158015611664573d6000803e3d6000fd5b505050506040513d602081101561167a57600080fd5b5051604080517f7d56add70000000000000000000000000000000000000000000000000000000081529051919c50600160a060020a03861691637d56add7916004808201926020929091908290030181600087803b1580156116db57600080fd5b505af11580156116ef573d6000803e3d6000fd5b505050506040513d602081101561170557600080fd5b505198505b505050505050505092959194509250565b60008060608561172a81610964565b151561177c576040805160e560020a62461bcd0281526020600482015260226024820152600080516020613ce5833981519152604482015260f260020a61195902606482015290519081900360840190fd5b600061178661369a565b905080600160a060020a03166322d2dd346040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156117c657600080fd5b505af11580156117da573d6000803e3d6000fd5b505050506040513d60208110156117f057600080fd5b50516040805160e060020a633b562a6d0281523360048201529051600160a060020a0390921691633b562a6d916024808201926020929091908290030181600087803b15801561183f57600080fd5b505af1158015611853573d6000803e3d6000fd5b505050506040513d602081101561186957600080fd5b5051806118e7575080600160a060020a03166322d2dd346040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156118af57600080fd5b505af11580156118c3573d6000803e3d6000fd5b505050506040513d60208110156118d957600080fd5b5051600160a060020a031633145b80611963575080600160a060020a0316638da5cb5b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561192b57600080fd5b505af115801561193f573d6000803e3d6000fd5b505050506040513d602081101561195557600080fd5b5051600160a060020a031633145b1515611a2b576040805160e560020a62461bcd02815260206004820152607c60248201527f41636365737320746f2074686973206d6574686f6420616c6c6f77656420666f60448201527f7220766572696669636174696f6e20636f6e74726163742c207665726966696360648201527f6174696f6e20636f6e747261637420666163746f7279206f72206163636f756e60848201527f742073746f726167652061646170746572206f776e6572206f6e6c790000000060a482015290519081900360c40190fd5b611a3361369a565b945084600160a060020a031663293b0c4e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611a7357600080fd5b505af1158015611a87573d6000803e3d6000fd5b505050506040513d6020811015611a9d57600080fd5b5051604080518082018252601b8152600080516020613cc58339815191526020828101919091528251600160a060020a038e16818301908152606082018d905260809482018581528e5160a08401528e51969a508f968f968f9695939492939083019260c001919088019080838360005b83811015611b26578181015183820152602001611b0e565b50505050905090810190601f168015611b535780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015611b86578181015183820152602001611b6e565b50505050905090810190601f168015611bb35780820380516001836020036101000a031916815260200191505b509650505050505050604051602081830303815290604052925083600160a060020a031663ca446dd9846040518082805190602001908083835b60208310611c0c5780518252601f199092019160209182019101611bed565b5181516020939093036101000a60001901801990911692169190911790526040805191909301819003812063ffffffff871660e060020a0282526004820152600160a060020a038d166024820152915160448084019550600094509092839003019050818387803b158015611c8057600080fd5b505af1158015611c94573d6000803e3d6000fd5b50505050505050505050505050565b6000606082611cb181610964565b1515611d03576040805160e560020a62461bcd0281526020600482015260226024820152600080516020613ce5833981519152604482015260f260020a61195902606482015290519081900360840190fd5b84846040805190810160405280600681526020017f6c656e67746800000000000000000000000000000000000000000000000000008152506040516020018084600160a060020a0316600160a060020a031681526020018060200180602001838103835285818151815260200191508051906020019080838360005b83811015611d97578181015183820152602001611d7f565b50505050905090810190601f168015611dc45780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015611df7578181015183820152602001611ddf565b50505050905090810190601f168015611e245780820380516001836020036101000a031916815260200191505b50955050505050506040516020818303038152906040529150611e4561369a565b600160a060020a031663293b0c4e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611e8257600080fd5b505af1158015611e96573d6000803e3d6000fd5b505050506040513d6020811015611eac57600080fd5b50516040518351600160a060020a039092169163bd02d0f5918591819060208401908083835b60208310611ef15780518252601f199092019160209182019101611ed2565b51815160209384036101000a60001901801990921691161790526040805192909401829003822063ffffffff881660e060020a0283526004830152925160248083019650939450929083900301905081600087803b158015611f5257600080fd5b505af1158015611f66573d6000803e3d6000fd5b505050506040513d6020811015611f7c57600080fd5b505195945050505050565b6000806060611f9461369a565b925082600160a060020a031663beb837126040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611fd457600080fd5b505af1158015611fe8573d6000803e3d6000fd5b505050506040513d6020811015611ffe57600080fd5b5051600160a060020a0316331461201457600080fd5b82600160a060020a031663293b0c4e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561205257600080fd5b505af1158015612066573d6000803e3d6000fd5b505050506040513d602081101561207c57600080fd5b5051604080518082018252601b8152600080516020613cc583398151915260208281019182528351600160a060020a038b1691810191825293840189905260608085019081528351608086015283519597508a958a959293919260a001919080838360005b838110156120f95781810151838201526020016120e1565b50505050905090810190601f1680156121265780820380516001836020036101000a031916815260200191505b50945050505050604051602081830303815290604052905081600160a060020a031663e2a4853a826040518082805190602001908083835b6020831061217d5780518252601f19909201916020918201910161215e565b5181516020939093036101000a60001901801990911692169190911790526040805191909301819003812063ffffffff871660e060020a0282526004820152426024820152915160448084019550600094509092839003019050818387803b1580156121e857600080fd5b505af11580156121fc573d6000803e3d6000fd5b505050505050505050565b600080612215858585612229565b600160a060020a0316151595945050505050565b600060608361223781610964565b1515612289576040805160e560020a62461bcd0281526020600482015260226024820152600080516020613ce5833981519152604482015260f260020a61195902606482015290519081900360840190fd5b85600061229461369a565b905080600160a060020a03166322d2dd346040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156122d457600080fd5b505af11580156122e8573d6000803e3d6000fd5b505050506040513d60208110156122fe57600080fd5b50516040805160e060020a633b562a6d0281523360048201529051600160a060020a0390921691633b562a6d916024808201926020929091908290030181600087803b15801561234d57600080fd5b505af1158015612361573d6000803e3d6000fd5b505050506040513d602081101561237757600080fd5b505180612463575080600160a060020a031663b819723a6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156123bd57600080fd5b505af11580156123d1573d6000803e3d6000fd5b505050506040513d60208110156123e757600080fd5b50516040805160e060020a633b562a6d0281523360048201529051600160a060020a0390921691633b562a6d916024808201926020929091908290030181600087803b15801561243657600080fd5b505af115801561244a573d6000803e3d6000fd5b505050506040513d602081101561246057600080fd5b50515b806124df575080600160a060020a03166322d2dd346040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156124a757600080fd5b505af11580156124bb573d6000803e3d6000fd5b505050506040513d60208110156124d157600080fd5b5051600160a060020a031633145b8061255b575080600160a060020a031663beb837126040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561252357600080fd5b505af1158015612537573d6000803e3d6000fd5b505050506040513d602081101561254d57600080fd5b5051600160a060020a031633145b806125705750600054600160a060020a031633145b806125ec575080600160a060020a0316638da5cb5b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156125b457600080fd5b505af11580156125c8573d6000803e3d6000fd5b505050506040513d60208110156125de57600080fd5b5051600160a060020a031633145b806125ff575033600160a060020a038316145b151561267b576040805160e560020a62461bcd02815260206004820152603660248201527f41636365737320746f2074686973206d6574686f64206e6f7420616c6c6f776560448201527f642066726f6d2063757272656e74206163636f756e7400000000000000000000606482015290519081900360840190fd5b8787876040805190810160405280601b8152602001600080516020613cc58339815191528152506040516020018085600160a060020a0316600160a060020a031681526020018060200184815260200180602001838103835286818151815260200191508051906020019080838360005b838110156127045781810151838201526020016126ec565b50505050905090810190601f1680156127315780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b8381101561276457818101518382015260200161274c565b50505050905090810190601f1680156127915780820380516001836020036101000a031916815260200191505b50965050505050505060405160208183030381529060405293506127b361369a565b600160a060020a031663293b0c4e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156127f057600080fd5b505af1158015612804573d6000803e3d6000fd5b505050506040513d602081101561281a57600080fd5b50516040518551600160a060020a03909216916321f8a721918791819060208401908083835b6020831061285f5780518252601f199092019160209182019101612840565b51815160209384036101000a60001901801990921691161790526040805192909401829003822063ffffffff881660e060020a0283526004830152925160248083019650939450929083900301905081600087803b1580156128c057600080fd5b505af11580156128d4573d6000803e3d6000fd5b505050506040513d60208110156128ea57600080fd5b505198975050505050505050565b6060600060608461290881610964565b151561295a576040805160e560020a62461bcd0281526020600482015260226024820152600080516020613ce5833981519152604482015260f260020a61195902606482015290519081900360840190fd5b86600061296561369a565b905080600160a060020a03166322d2dd346040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156129a557600080fd5b505af11580156129b9573d6000803e3d6000fd5b505050506040513d60208110156129cf57600080fd5b50516040805160e060020a633b562a6d0281523360048201529051600160a060020a0390921691633b562a6d916024808201926020929091908290030181600087803b158015612a1e57600080fd5b505af1158015612a32573d6000803e3d6000fd5b505050506040513d6020811015612a4857600080fd5b505180612b34575080600160a060020a031663b819723a6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015612a8e57600080fd5b505af1158015612aa2573d6000803e3d6000fd5b505050506040513d6020811015612ab857600080fd5b50516040805160e060020a633b562a6d0281523360048201529051600160a060020a0390921691633b562a6d916024808201926020929091908290030181600087803b158015612b0757600080fd5b505af1158015612b1b573d6000803e3d6000fd5b505050506040513d6020811015612b3157600080fd5b50515b80612bb0575080600160a060020a03166322d2dd346040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015612b7857600080fd5b505af1158015612b8c573d6000803e3d6000fd5b505050506040513d6020811015612ba257600080fd5b5051600160a060020a031633145b80612c2c575080600160a060020a031663beb837126040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015612bf457600080fd5b505af1158015612c08573d6000803e3d6000fd5b505050506040513d6020811015612c1e57600080fd5b5051600160a060020a031633145b80612c415750600054600160a060020a031633145b80612cbd575080600160a060020a0316638da5cb5b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015612c8557600080fd5b505af1158015612c99573d6000803e3d6000fd5b505050506040513d6020811015612caf57600080fd5b5051600160a060020a031633145b80612cd0575033600160a060020a038316145b1515612d4c576040805160e560020a62461bcd02815260206004820152603660248201527f41636365737320746f2074686973206d6574686f64206e6f7420616c6c6f776560448201527f642066726f6d2063757272656e74206163636f756e7400000000000000000000606482015290519081900360840190fd5b612d5461369a565b600160a060020a031663293b0c4e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015612d9157600080fd5b505af1158015612da5573d6000803e3d6000fd5b505050506040513d6020811015612dbb57600080fd5b50516040805180820182526004815260e060020a6364617461026020828101919091528251600160a060020a038e16818301908152606082018d905260809482018581528e5160a08401528e51969b508f968f968f9695939492939083019260c001919088019080838360005b83811015612e40578181015183820152602001612e28565b50505050905090810190601f168015612e6d5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015612ea0578181015183820152602001612e88565b50505050905090810190601f168015612ecd5780820380516001836020036101000a031916815260200191505b509650505050505050604051602081830303815290604052935084600160a060020a031663986e791a856040518082805190602001908083835b60208310612f265780518252601f199092019160209182019101612f07565b5181516020939093036101000a60001901801990911692169190911790526040805191909301819003812063ffffffff871660e060020a0282526004820152915160248084019550600094509092839003019050818387803b158015612f8b57600080fd5b505af1158015612f9f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015612fc857600080fd5b810190808051640100000000811115612fe057600080fd5b82016020810184811115612ff357600080fd5b815164010000000081118282018710171561300d57600080fd5b50909d9c50505050505050505050505050565b6060600061302e8484611ca3565b905061303b8484836128f8565b949350505050565b6000606083836040805190810160405280601b8152602001600080516020613cc58339815191528152506040516020018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156130cb5781810151838201526020016130b3565b50505050905090810190601f1680156130f85780820380516001836020036101000a031916815260200191505b50945050505050604051602081830303815290604052905061311861369a565b600160a060020a031663293b0c4e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561315557600080fd5b505af1158015613169573d6000803e3d6000fd5b505050506040513d602081101561317f57600080fd5b50516040518251600160a060020a039092169163bd02d0f5918491819060208401908083835b602083106131c45780518252601f1990920191602091820191016131a5565b51815160209384036101000a60001901801990921691161790526040805192909401829003822063ffffffff881660e060020a0283526004830152925160248083019650939450929083900301905081600087803b15801561322557600080fd5b505af1158015613239573d6000803e3d6000fd5b505050506040513d602081101561324f57600080fd5b5051949350505050565b600054600160a060020a0316331461327057600080fd5b600160a060020a038116151561328557600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000806132fa8484611ca3565b905061303b848483612229565b600060606000606061332986602060405190810160405280600081525061372a565b1561333357600080fd5b61333d8786611ca3565b935061337e856040805190810160405280600681526020017f646576696365000000000000000000000000000000000000000000000000000081525061372a565b1561338e57831561338e57600080fd5b60408051602081019091526000815292506133a761369a565b600160a060020a031663293b0c4e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156133e457600080fd5b505af11580156133f8573d6000803e3d6000fd5b505050506040513d602081101561340e57600080fd5b5051915060008411156136765786858560408051908101604052806004815260200160e060020a6364617461028152506040516020018085600160a060020a0316600160a060020a031681526020018060200184815260200180602001838103835286818151815260200191508051906020019080838360005b838110156134a0578181015183820152602001613488565b50505050905090810190601f1680156134cd5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156135005781810151838201526020016134e8565b50505050905090810190601f16801561352d5780820380516001836020036101000a031916815260200191505b509650505050505050604051602081830303815290604052905081600160a060020a031663986e791a826040518082805190602001908083835b602083106135865780518252601f199092019160209182019101613567565b5181516020939093036101000a60001901801990911692169190911790526040805191909301819003812063ffffffff871660e060020a0282526004820152915160248084019550600094509092839003019050818387803b1580156135eb57600080fd5b505af11580156135ff573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561362857600080fd5b81019080805164010000000081111561364057600080fd5b8201602081018481111561365357600080fd5b815164010000000081118282018710171561366d57600080fd5b50909650505050505b613680838761372a565b1515613691576136918787876137ec565b50505050505050565b600154604080517f127f0f070000000000000000000000000000000000000000000000000000000081529051600092600160a060020a03169163127f0f0791600480830192602092919082900301818787803b1580156136f957600080fd5b505af115801561370d573d6000803e3d6000fd5b505050506040513d602081101561372357600080fd5b5051919050565b6000816040518082805190602001908083835b6020831061375c5780518252601f19909201916020918201910161373d565b51815160209384036101000a6000190180199092169116179052604051919093018190038120885190955088945090928392508401908083835b602083106137b55780518252601f199092019160209182019101613796565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120939093149695505050505050565b6000806060806137fc8786611ca3565b600101935061380961369a565b600160a060020a031663293b0c4e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561384657600080fd5b505af115801561385a573d6000803e3d6000fd5b505050506040513d602081101561387057600080fd5b50516040805180820182526004815260e060020a6364617461026020828101919091528251600160a060020a038c16818301908152606082018a905260809482018581528b5160a08401528b519699508d968c968c9695939492939083019260c001919088019080838360005b838110156138f55781810151838201526020016138dd565b50505050905090810190601f1680156139225780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b8381101561395557818101518382015260200161393d565b50505050905090810190601f1680156139825780820380516001836020036101000a031916815260200191505b509650505050505050604051602081830303815290604052915082600160a060020a0316636e899550836040518082805190602001908083835b602083106139db5780518252601f1990920191602091820191016139bc565b51815160209384036101000a60001901801990921691161790526040805192909401829003822063ffffffff881660e060020a02835260048301818152602484019586528f5160448501528f519197508f96509493506064909201919085019080838360005b83811015613a59578181015183820152602001613a41565b50505050905090810190601f168015613a865780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015613aa657600080fd5b505af1158015613aba573d6000803e3d6000fd5b5050505086856040805190810160405280600681526020017f6c656e67746800000000000000000000000000000000000000000000000000008152506040516020018084600160a060020a0316600160a060020a031681526020018060200180602001838103835285818151815260200191508051906020019080838360005b83811015613b52578181015183820152602001613b3a565b50505050905090810190601f168015613b7f5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015613bb2578181015183820152602001613b9a565b50505050905090810190601f168015613bdf5780820380516001836020036101000a031916815260200191505b5095505050505050604051602081830303815290604052905082600160a060020a031663e2a4853a826040518082805190602001908083835b60208310613c375780518252601f199092019160209182019101613c18565b5181516020939093036101000a60001901801990911692169190911790526040805191909301819003812063ffffffff871660e060020a0282526004820152602481018b9052915160448084019550600094509092839003019050818387803b158015613ca357600080fd5b505af1158015613cb7573d6000803e3d6000fd5b50505050505050505050505600766572696669636174696f6e436f6e747261637441646472657373000000000050726f7669646564206669656c64206e616d65206973206e6f7420616c6c6f77a165627a7a7230582045c2493625c796b02da4567a53b1fcec33184e49fa968fafdc70a534d4e6b6e70029";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_ADDALLOWEDFIELDNAME = "addAllowedFieldName";

    public static final String FUNC_REMOVEALLOWEDFIELDNAME = "removeAllowedFieldName";

    public static final String FUNC_ISALLOWEDFIELDNAME = "isAllowedFieldName";

    public static final String FUNC_SETFIELDMAINDATA = "setFieldMainData";

    public static final String FUNC_GETFIELDDETAILS = "getFieldDetails";

    public static final String FUNC_GETLASTFIELDVERIFICATIONCONTRACTADDRESS = "getLastFieldVerificationContractAddress";

    public static final String FUNC_GETFIELDVERIFICATIONCONTRACTADDRESS = "getFieldVerificationContractAddress";

    public static final String FUNC_GETFIELDLASTMAINDATA = "getFieldLastMainData";

    public static final String FUNC_GETFIELDMAINDATA = "getFieldMainData";

    public static final String FUNC_GETFIELDLASTVERIFICATIONDATA = "getFieldLastVerificationData";

    public static final String FUNC_GETFIELDVERIFICATIONDATA = "getFieldVerificationData";

    public static final String FUNC_GETISFIELDVERIFICATIONCONTRACTEXIST = "getIsFieldVerificationContractExist";

    public static final String FUNC_SETFIELDLASTVERIFICATIONCONTRACTADDRESS = "setFieldLastVerificationContractAddress";

    public static final String FUNC_SETFIELDVERIFICATIONCONTRACTADDRESS = "setFieldVerificationContractAddress";

    public static final String FUNC_GETFIELDHISTORYLENGTH = "getFieldHistoryLength";

    public static final String FUNC_SETREWARDEDAT = "setRewardedAt";

    public static final String FUNC_GETREWARDEDAT = "getRewardedAt";

//    public static final Event OWNERSHIPRENOUNCED_EVENT = new Event("OwnershipRenounced",
//            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
//    ;
//
//    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred",
//            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
//    ;

    public static final Event OWNERSHIPRENOUNCED_EVENT = new Event("OwnershipRenounced",
        Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
        Arrays.<TypeReference<?>>asList());
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred",
        Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
        Arrays.<TypeReference<?>>asList());
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("10", "0x23bb94897db919f6e24a30a160f180f57192738a");
    }

    protected AccountStorageAdapter(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected AccountStorageAdapter(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public RemoteCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static RemoteCall<AccountStorageAdapter> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String contextstorage) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(contextstorage)));
        return deployRemoteCall(AccountStorageAdapter.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<AccountStorageAdapter> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String contextstorage) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(contextstorage)));
        return deployRemoteCall(AccountStorageAdapter.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public List<OwnershipRenouncedEventResponse> getOwnershipRenouncedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPRENOUNCED_EVENT, transactionReceipt);
        ArrayList<OwnershipRenouncedEventResponse> responses = new ArrayList<OwnershipRenouncedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipRenouncedEventResponse typedResponse = new OwnershipRenouncedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipRenouncedEventResponse> ownershipRenouncedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnershipRenouncedEventResponse>() {
            @Override
            public OwnershipRenouncedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPRENOUNCED_EVENT, log);
                OwnershipRenouncedEventResponse typedResponse = new OwnershipRenouncedEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<OwnershipRenouncedEventResponse> ownershipRenouncedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPRENOUNCED_EVENT));
        return ownershipRenouncedEventObservable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipTransferredEventResponse> ownershipTransferredEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<OwnershipTransferredEventResponse> ownershipTransferredEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventObservable(filter);
    }

    public RemoteCall<TransactionReceipt> addAllowedFieldName(String fieldName) {
        final Function function = new Function(
                FUNC_ADDALLOWEDFIELDNAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(fieldName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> removeAllowedFieldName(String fieldName) {
        final Function function = new Function(
                FUNC_REMOVEALLOWEDFIELDNAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(fieldName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> isAllowedFieldName(String fieldName) {
        final Function function = new Function(FUNC_ISALLOWEDFIELDNAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(fieldName)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> setFieldMainData(String data, String accountFieldName) {
        final Function function = new Function(
                FUNC_SETFIELDMAINDATA, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(data), 
                new org.web3j.abi.datatypes.Utf8String(accountFieldName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple4<String, BigInteger, String, BigInteger>> getFieldDetails(String accountAddress, String accountFieldName) {
        final Function function = new Function(FUNC_GETFIELDDETAILS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(accountAddress), 
                new org.web3j.abi.datatypes.Utf8String(accountFieldName)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple4<String, BigInteger, String, BigInteger>>(
                new Callable<Tuple4<String, BigInteger, String, BigInteger>>() {
                    @Override
                    public Tuple4<String, BigInteger, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, BigInteger, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<String> getLastFieldVerificationContractAddress(String accountAddress, String accountFieldName) {
        final Function function = new Function(FUNC_GETLASTFIELDVERIFICATIONCONTRACTADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(accountAddress), 
                new org.web3j.abi.datatypes.Utf8String(accountFieldName)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> getFieldVerificationContractAddress(String accountAddress, String accountFieldName, BigInteger index) {
        final Function function = new Function(FUNC_GETFIELDVERIFICATIONCONTRACTADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(accountAddress), 
                new org.web3j.abi.datatypes.Utf8String(accountFieldName), 
                new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> getFieldLastMainData(String accountAddress, String accountFieldName) {
        final Function function = new Function(FUNC_GETFIELDLASTMAINDATA, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(accountAddress), 
                new org.web3j.abi.datatypes.Utf8String(accountFieldName)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> getFieldMainData(String accountAddress, String accountFieldName, BigInteger index) {
        final Function function = new Function(FUNC_GETFIELDMAINDATA, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(accountAddress), 
                new org.web3j.abi.datatypes.Utf8String(accountFieldName), 
                new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple3<BigInteger, String, BigInteger>> getFieldLastVerificationData(String accountAddress, String accountFieldName) {
        final Function function = new Function(FUNC_GETFIELDLASTVERIFICATIONDATA, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(accountAddress), 
                new org.web3j.abi.datatypes.Utf8String(accountFieldName)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple3<BigInteger, String, BigInteger>>(
                new Callable<Tuple3<BigInteger, String, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, String, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<Tuple3<BigInteger, String, BigInteger>> getFieldVerificationData(String accountAddress, String accountFieldName, BigInteger index) {
        final Function function = new Function(FUNC_GETFIELDVERIFICATIONDATA, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(accountAddress), 
                new org.web3j.abi.datatypes.Utf8String(accountFieldName), 
                new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple3<BigInteger, String, BigInteger>>(
                new Callable<Tuple3<BigInteger, String, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, String, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<Boolean> getIsFieldVerificationContractExist(String accountAddress, String accountFieldName, BigInteger index) {
        final Function function = new Function(FUNC_GETISFIELDVERIFICATIONCONTRACTEXIST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(accountAddress), 
                new org.web3j.abi.datatypes.Utf8String(accountFieldName), 
                new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> setFieldLastVerificationContractAddress(String accountAddress, String accountFieldName, String verificationContractAddress) {
        final Function function = new Function(
                FUNC_SETFIELDLASTVERIFICATIONCONTRACTADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(accountAddress), 
                new org.web3j.abi.datatypes.Utf8String(accountFieldName), 
                new org.web3j.abi.datatypes.Address(verificationContractAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setFieldVerificationContractAddress(String accountAddress, String accountFieldName, BigInteger index, String verificationContractAddress) {
        final Function function = new Function(
                FUNC_SETFIELDVERIFICATIONCONTRACTADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(accountAddress), 
                new org.web3j.abi.datatypes.Utf8String(accountFieldName), 
                new org.web3j.abi.datatypes.generated.Uint256(index), 
                new org.web3j.abi.datatypes.Address(verificationContractAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getFieldHistoryLength(String accountAddress, String accountFieldName) {
        final Function function = new Function(FUNC_GETFIELDHISTORYLENGTH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(accountAddress), 
                new org.web3j.abi.datatypes.Utf8String(accountFieldName)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> setRewardedAt(String accountAddress, BigInteger milestone) {
        final Function function = new Function(
                FUNC_SETREWARDEDAT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(accountAddress), 
                new org.web3j.abi.datatypes.generated.Uint256(milestone)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getRewardedAt(String accountAddress, BigInteger milestone) {
        final Function function = new Function(FUNC_GETREWARDEDAT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(accountAddress), 
                new org.web3j.abi.datatypes.generated.Uint256(milestone)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public static AccountStorageAdapter load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new AccountStorageAdapter(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static AccountStorageAdapter load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new AccountStorageAdapter(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class OwnershipRenouncedEventResponse {
        public Log log;

        public String previousOwner;
    }

    public static class OwnershipTransferredEventResponse {
        public Log log;

        public String previousOwner;

        public String newOwner;
    }
}
